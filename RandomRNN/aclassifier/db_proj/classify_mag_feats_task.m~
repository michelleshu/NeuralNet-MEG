



zscore_data = 1;
classify_animacy = 1;

numWords=20;
numFolds =200;
num_trials = 1;
zscore_folds =0;
time_start=0;
time_end=0.75;

subj_ids = {'B' ,   'D'  ,  'J' ,   'F'  ,  'I'  ,  'G'};%'A','B','C','D','E','F','G','I','J'};

% feats_dir = '~/fmri/data/20questions/features/';
% res_dir = '/other/bdstore01x/afyshe/fmri/results/20questions/l2/z_data_zscore1000/';

%subj_ids = {'F','G','I','J'};%{'A','B','C','D','E','F','G','I','J'};
%res_dir = '~/research/fmri/results/l2/zscore_sem_infold_0-0.75/';
%feats_dir = '~/research/fmri/data/20questions/features/';


res_dir = '/usr1/afyshe/fmri/results/l2/zdata_task/';
feats_dir = '/usr1/afyshe/fmri/data/20questions/features/task_dim/';

% subj_ids = {'A','B','C'};%{'A','B','C','D','E','F','G','I','J'};
% res_dir = '~/research/fmri/results/l2/noz_data/';
% feats_dir = '~/research/fmri/data/20questions/features/';

if ~exist(res_dir,'dir'),
    mkdir(res_dir);
end



feat_types  = {'raw','gp','wmean','wslope'};%,'fft_power','fft_phase'};%,'cwave_haar'};%,'corr','cwave_haar'};

save(sprintf('%sparams.mat',res_dir),'numWords','numFolds','num_trials',...
    'zscore_folds','time_start','time_end');

for s = 1:length(subj_ids),
    subj = subj_ids{s};
    res_sub_dir = sprintf('%s/%s',res_dir,subj);
    if ~exist(res_sub_dir,'dir'),
        mkdir(res_sub_dir);
    end
    
    %Files have data structures with the following fields
    %'data': The output of the feature transformation
    %'time': The time points for the beginning of each feature window.  This vector will have the same length as the last dimension of 'data'.
    %'window_width': The width of each feature window (i.e. the window for which the given feature was created)
    %'window_step': The step size between adjacent windows.  If window_step = window_width then the windows do not overlap at all.
    %'words': the order of the words as they appear in 'data'.
    
    
    for f_type = 1:length(feat_types),
        
        
        cur_fname = sprintf('%s/%s/%s_%s_avrg.mat',feats_dir,subj,subj,feat_types{f_type});
        if exist(cur_fname,'file') == 0,
            fprintf('Warning - file does not exist: %s\n',cur_fname);
            continue;
        end
        
        fprintf('Now load %s\n',cur_fname);
        struct = load(cur_fname);
        
        time = struct.time;
        
        t_ind = time >=time_start & time <=time_end;
        time = struct.time(t_ind);
        if ndims(struct.data) == 3,
            struct.data = struct.data(:,:,t_ind);
        else
            if ndims(struct.data) ~= 4,
                fprintf('Unknown num dims %i\n', ndims(struct.data) );
                die;
            end
            struct.data = struct.data(:,:,:,t_ind);
        end
        
        words = struct.qs;
        
        % 1	Is it manmade?
        % 2	Is it made of metal?
        % 3	Is it hollow?
        % 4   Is it hard to catch?
        % 5   Does it grow?
        % 6   Was it ever alive?
        % 7  Could you fit inside it?
        % 8   Does it have at least one hole?
        % 9   Can you hold it?
        % 10   Is it bigger than a loaf of bread?
        % 11  Does it live in groups?
        % 12  Can it keep you dry?
        % 13  Is part of it made of glass?
        % 14  Is it bigger than a car?
        % 15  Can you hold it in one hand?
        % 16  Is it manufactured?
        % 17  Is it bigger than a microwave oven?
        % 18  Is it alive?
        % 19  Does it have feelings?
        % 20  Can you pick it up?
        
        if classify_animacy == 1,
            words(words == 1 | words == 2 | words == 5 | ...
                words == 6 | words ==11 | words == 13 | words == 16 | ...
                words == 18 | words == 19 ) = 1;
            words(words ~= 1) = 0;
            
        end
        
        
        s_size= size(struct.data);
        num_sensors = prod(s_size(2:end-1));
        time_length = length(time);
        struct.data = reshape(struct.data,[s_size(1),num_sensors,time_length]);
        if zscore_data ==1,
            struct.data = zscore(struct.data);
        end
        %cur_data = double(cur_data);
        
        total_correct = zeros(1,num_folds);
        all_data = struct.data;
        labels = words;
        for i = 1:num_folds,
            %f = LDA_folds(i) IndFeat(all_data(FOLDS ~= i,:), labels(FOLDS ~= i));
            
            experiment.trainLabels = labels(folds~= i);
            lda = IndFeat(all_data(FOLDS ~= i,:), labels(FOLDS ~= i))
            experiment.trainExamples = all_data(folds ~= i, :);%(second dim is number of features)
            
            
            
            
            experiment.testLabels = labels(folds == i);
            experiment.testExamples = all_data(folds == i, :);
            
            experiment = GNBTrain(experiment);
            experiment = GNBTest(experiment);
            total_correct( i) = experiment.numCorrect/sum(folds == i);
             
        end
        save(sprintf('%s/%s_%s_%i_gnb.mat',res_sub_dir,subj,...
            feat_types{f_type},tr),'total_correct');
        fprintf('%s %s Total percent correct %.2f \n',subj,...
            feat_types{f_type}, mean(total_correct));
        %
        %         for tr = 1:num_trials,
        %             fprintf('Trial %i, %s\n',tr,datestr(now));
        %             rs = RandStream('mcg16807', 'Seed',tr);
        %             RandStream.setDefaultStream(rs);
        %             folds = crossvalind('Kfold',size(struct.data,1),numFolds);
        %
        %             doOneCrossValNoZ(struct.data,words', folds, numFolds, size(struct.data,1), ...
        %                 sprintf('%s/%s_%s_%i.mat',res_sub_dir,subj,...
        %                 feat_types{f_type},tr),zscore_folds);
        %         end
        
    end
    
end